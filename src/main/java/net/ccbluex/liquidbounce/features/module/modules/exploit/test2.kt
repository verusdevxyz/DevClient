import net.ccbluex.liquidbounce.event.PacketEvent
import net.ccbluex.liquidbounce.event.EventTarget
import net.ccbluex.liquidbounce.features.module.Module
import net.ccbluex.liquidbounce.features.module.Category
import net.ccbluex.liquidbounce.script.api.global.Chat
import net.ccbluex.liquidbounce.utils.PacketUtils
import net.minecraft.network.Packet
import net.minecraft.network.play.client.C00PacketKeepAlive
import net.minecraft.network.play.server.S00PacketKeepAlive
import net.minecraft.network.play.server.S12PacketEntityVelocity
import java.util.concurrent.ConcurrentHashMap

object PolaresAntiquacker : Module("BIGLAG", Category.EXPLOIT) {

    private val pingMap: MutableMap<Int, Long> = ConcurrentHashMap()
    private var shouldCancel: Boolean = false
    private var tickCounter: Int = 0

    @EventTarget
    fun onPacket(event: PacketEvent) {
        val packet = event.packet

        if (packet is S00PacketKeepAlive) {
            pingMap[packet.func_149134_c()] = System.currentTimeMillis()
            shouldCancel = true
            Chat.print("Sucesssssssesfuli")
            tickCounter = 20
        }

        if (packet is C00PacketKeepAlive) {
            val id = packet.key
            val pingTime = System.currentTimeMillis() - (pingMap[id] ?: System.currentTimeMillis())
            PacketUtils.sendPacket(C00PacketKeepAlive(pingTime.toInt()))
        }

        if (packet is S12PacketEntityVelocity) {
            if (shouldCancel) {
                if (mc.thePlayer?.ticksExisted?.rem(20) == 0) {
                    event.cancelEvent()
                }
            }
        }

        if (tickCounter > 0) {
            tickCounter--
            if (tickCounter == 0) {
                shouldCancel = false
            }
        }
    }
}
