package net.ccbluex.liquidbounce.features.module.modules.exploit.disablermodes

import net.ccbluex.liquidbounce.config.ToggleableConfigurable
import net.ccbluex.liquidbounce.event.events.PacketEvent
import net.ccbluex.liquidbounce.event.handler
import net.ccbluex.liquidbounce.features.module.modules.exploit.disabler.ModuleDisabler
import net.ccbluex.liquidbounce.script.bindings.api.JsClient
import net.minecraft.client.MinecraftClient
import net.ccbluex.liquidbounce.event.events.DrawOutlinesEvent
import net.ccbluex.liquidbounce.event.events.MouseRotationEvent
import net.ccbluex.liquidbounce.features.module.modules.exploit.disabler.disablers.DisablerSparkyE
import net.minecraft.network.packet.c2s.common.CommonPongC2SPacket
import net.minecraft.network.packet.c2s.play.ClickSlotC2SPacket
import net.minecraft.network.packet.c2s.play.PlayerMoveC2SPacket
import net.minecraft.network.packet.c2s.play.ClientCommandC2SPacket
import net.minecraft.network.packet.c2s.play.PlayerInteractItemC2SPacket
import net.minecraft.network.packet.c2s.play.PlayerInteractBlockC2SPacket
import net.minecraft.network.packet.c2s.play.PlayerInteractEntityC2SPacket
import net.minecraft.network.packet.c2s.play.PlayerInputC2SPacket
import net.minecraft.network.packet.s2c.common.CommonPingS2CPacket
import net.minecraft.network.packet.s2c.common.KeepAliveS2CPacket
import net.minecraft.network.packet.s2c.play.EntityVelocityUpdateS2CPacket

internal object DisablerSparkyF : ToggleableConfigurable(ModuleDisabler, "Sparky F", false) {
    @Suppress("unused")
    val packetHandler = handler<PacketEvent> { event ->
        val packet = event.packet

        when (packet) {
            is PlayerInteractEntityC2SPacket -> {
               // JsClient.displayChatMessage("Transaction cancelled: Moving item in inventory")
               //event.cancelEvent()
            }

            is EntityVelocityUpdateS2CPacket -> {
                val lol = (-0.010).toDouble()
                //val lol2 = -0.9999
                //mc.player!!.setVelocity(0.0,lol,0.0)
                //mc.player!!.setVelocityClient(packet.getVelocityX(),lol2,packet.getVelocityZ())
                mc.player!!.networkHandler.sendPacket(CommonPongC2SPacket(32768))
                //event.cancelEvent()
            }

            is PlayerMoveC2SPacket -> {
                val player = mc.player
                if (player != null && (player.yaw != packet.yaw || player.pitch != packet.pitch)) {
                    //JsClient.displayChatMessage("Transaction cancelled: Player head rotation")
                    //event.cancelEvent()
                    DisablerSparkyE.mc.player?.networkHandler?.onPing(CommonPingS2CPacket(-2   ))
                }
            }

            is ClientCommandC2SPacket -> {
                if (packet.mode == ClientCommandC2SPacket.Mode.PRESS_SHIFT_KEY || packet.mode == ClientCommandC2SPacket.Mode.RELEASE_SHIFT_KEY) {
                    JsClient.displayChatMessage("Transaction cancelled: Click/Use item")
                    event.cancelEvent()
                }
            }
        }
    }

    @Suppress("unused")
    fun onRender(event: MouseRotationEvent) {
        if (mc.currentScreen != null) {
            val mouseX = mc.mouse.x
            val mouseY = mc.mouse.y
            JsClient.displayChatMessage("Transaction cancelled: Mouse movement in inventory")
        }
    }
}
