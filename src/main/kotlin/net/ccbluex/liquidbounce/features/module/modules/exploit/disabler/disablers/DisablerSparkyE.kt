/*
 * This file is part of LiquidBounce (https://github.com/CCBlueX/LiquidBounce)
 *
 * Copyright (c) 2015 - 2024 CCBlueX
 *
 * LiquidBounce is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * LiquidBounce is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with LiquidBounce. If not, see <https://www.gnu.org/licenses/>.
 */
package net.ccbluex.liquidbounce.features.module.modules.exploit.disabler.disablers

import net.ccbluex.liquidbounce.config.ToggleableConfigurable
import net.ccbluex.liquidbounce.event.events.PacketEvent
import net.ccbluex.liquidbounce.event.handler
import net.ccbluex.liquidbounce.features.module.modules.exploit.disabler.ModuleDisabler
import net.ccbluex.liquidbounce.script.bindings.api.JsClient
import net.minecraft.client.MinecraftClient
import net.minecraft.network.packet.c2s.common.CommonPongC2SPacket
import net.minecraft.network.packet.c2s.play.PlayerMoveC2SPacket
import net.minecraft.network.packet.s2c.common.CommonPingS2CPacket
import net.minecraft.network.packet.s2c.common.KeepAliveS2CPacket
import net.minecraft.network.packet.s2c.play.EntityVelocityUpdateS2CPacket
import kotlin.math.roundToInt

/**
 * SparkyE disabler
 *
 * This disabler is designed to bypass velocity checks by modifying packets.
 */
internal object DisablerSparkyE : ToggleableConfigurable(ModuleDisabler, "Sparky E", false) {

    override val mc = MinecraftClient.getInstance()
    private var threshold = 0.0

    @Suppress("unused")
    val packetHandler = handler<PacketEvent> { event ->
        when (val packet = event.packet) {
            is EntityVelocityUpdateS2CPacket -> {
                event.cancelEvent()
            }
            is PlayerMoveC2SPacket -> {
                val player = mc.player
                if (player != null && packet.y - player.y < 0.42) {
                    //event.cancelEvent()
                    mc.player?.networkHandler?.onPing(CommonPingS2CPacket(-2000))
                }
                if (player != null && packet.y - packet.y < -1){
                    packet.onGround = false
                    event.cancelEvent()
                }
            }
            is CommonPongC2SPacket -> {
                if (mc.player!!.y - player.y > 1.5) {
                    JsClient.displayChatMessage("lag")
                    event.cancelEvent()
                }
                if (mc.player!!.y - player.y < 0.42){
                    mc.player?.networkHandler?.onKeepAlive(KeepAliveS2CPacket(-1))
                    JsClient.displayChatMessage("LOL")
                }
                if (mc.player!!.y - player.y > 0.010){
                    val packet2 = CommonPongC2SPacket(-5000)
                    mc.player?.networkHandler?.sendPacket(packet2)
                    JsClient.displayChatMessage("test")
                    event.cancelEvent()
                }
            }
        }
    }

    @Suppress("unused")
    fun onUpdate() {
        val player = mc.player
        if (player != null) {
            if (player.isTouchingWater || player.isInLava || player.isClimbing) {
                threshold = 0.0
            } else if (player.hurtTime > 0) {
                if (player.velocity.y < 0.42 && player.velocity.y > 0.2) {
                    player.isOnGround = false
                    mc.player?.setVelocity(1.0,1.0,1.0)
                    threshold += 1.0
                } else {
                    threshold -= threshold.coerceAtMost(0.75)
                }
            }
            if (threshold > 12.6) {
                threshold = 0.0
            }
        }
    }
    override fun disable() {
        threshold = 0.0

    }
    override fun enable() {
        threshold = 0.0
    }
}
