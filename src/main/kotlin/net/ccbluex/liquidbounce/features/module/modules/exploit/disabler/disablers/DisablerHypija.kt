package net.ccbluex.liquidbounce.features.module.modules.exploit.disabler.disablers

import net.ccbluex.liquidbounce.config.ToggleableConfigurable
import net.ccbluex.liquidbounce.event.events.PacketEvent
import net.ccbluex.liquidbounce.event.events.PlayerTickEvent
import net.ccbluex.liquidbounce.event.events.WorldChangeEvent
import net.ccbluex.liquidbounce.event.handler
import net.ccbluex.liquidbounce.features.module.modules.exploit.disabler.ModuleDisabler
import net.ccbluex.liquidbounce.utils.client.chat
import net.ccbluex.liquidbounce.utils.client.inGame
import net.minecraft.network.packet.s2c.play.PlayerPositionLookS2CPacket

internal object DisablerHypija : ToggleableConfigurable(ModuleDisabler, "HypixelTEST", false) {

    private var op: Int = 0
    private var oq: Boolean = false
    private var fk: Boolean = false
    private var offGroundTicks: Int = 0
    var isFinished = false

    fun isDisabled(): Boolean {
        val disabler = DisablerHypija
        return disabler.enabled && isFinished
    }

    @Suppress("unused")
    val preMotionHandler = handler<PlayerTickEvent> {
        if (!inGame || !player.isOnGround) {
            offGroundTicks++
        } else {
            offGroundTicks = 0
        }

        if (fk && player.isOnGround) {
            player.jump()
            fk = false
            oq = true
        } else if (offGroundTicks >= 9 && oq) {
            if (offGroundTicks % 2 == 0) {
                player.setPosition(player.x + 0.095, player.y, player.z)
            }
            player.setVelocityClient(0.0, 0.0, 0.0)
        }
    }

    @Suppress("unused")
    val packetHandler = handler<PacketEvent> { event ->
        val packet = event.packet
        if (packet is PlayerPositionLookS2CPacket) {
            op++
            if (op == 20) {
                oq = false
                op = 0
                sendNotification("Automatically disabled Watchdog Jump check")
                isFinished = true
            }
        }
    }

    @Suppress("unused")
    private val worldChangeHandler = handler<WorldChangeEvent> {
        isFinished = false
        sendNotification("Disabling Jump check for Watchdog")
        fk = true
        oq = false
        op = 0
    }

    override fun enable() {
        isFinished = false
        worldChangeHandler
        super.enable()
    }

    override fun disable() {
        isFinished = false
        super.disable()
    }

    private fun sendNotification(message: String) {
        chat(message)
    }
}
